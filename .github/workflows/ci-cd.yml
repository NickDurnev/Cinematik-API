name: CI/CD

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Deploy to Server
        uses: appleboy/ssh-action@v1.2.1
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e  # Exit on any error
            
            echo "Loading NVM..."
            export NVM_DIR="$HOME/.nvm"
            source "$NVM_DIR/nvm.sh"
            nvm use 22.14.0 

            # Check if Cinematik-API directory exists, if not clone it
            if [ ! -d "Cinematik-API" ]; then
                echo "Cloning repository..."
                git clone https://${{ secrets.USERNAME }}:${{ secrets.TOKEN }}@github.com/${{ secrets.USERNAME }}/Cinematik-API.git
            fi
            
            cd Cinematik-API

            echo "Checking if we're in a git repository..."
            if [ ! -d ".git" ]; then
                echo "Error: Not in a git repository. Re-cloning..."
                cd ..
                rm -rf Cinematik-API
                git clone https://${{ secrets.USERNAME }}:${{ secrets.TOKEN }}@github.com/${{ secrets.USERNAME }}/Cinematik-API.git
                cd Cinematik-API
            fi

            echo "Ensuring we're on the main branch..."
            git checkout main
            
            echo "Fetching latest changes..."
            git fetch origin
            
            echo "Resetting to latest main branch..."
            git reset --hard origin/main
            
            echo "Cleaning untracked files..."
            git clean -fd            

            echo "Updating environment variables..."
            cat <<EOF > .env.stage.prod
            PORT=${{ secrets.PORT }}
            STAGE=prod
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            DATABASE_SSL_CA=${{ secrets.DATABASE_SSL_CA }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            RESEND_API_KEY=${{ secrets.RESEND_API_KEY }}
            CLIENT_APP_BASE_URL=${{ secrets.CLIENT_APP_BASE_URL }}
            NODE_ENV=production
            EOF

            echo "Cleaning old build..."
            rm -rf dist

            echo "Installing dependencies..."
            npm install --production
            npm install --save-dev @types/express @types/node @types/uuid
            
            echo "Installing all dependencies (including dev dependencies for build)..."
            npm install
            
            echo "Setting Node.js memory options..."
            export NODE_OPTIONS="--max-old-space-size=4096"

            echo "Checking current directory and package.json..."
            pwd
            ls -la
            echo "Package.json contents:"
            cat package.json | grep -A 20 '"scripts"'

            echo "Building the application..."
            npm run build

            echo "Running database migrations..."
            STAGE=prod npm run db:migrate-prod

            echo "Checking if dist directory exists and contains main.js..."
            ls -la dist/
            ls -la dist/src/ || echo "dist/src directory not found"

            echo "Restarting application..."
            pm2 delete cinematik-api || echo "No existing process to delete"
            
            echo "Starting application with PM2..."
            if [ -f "dist/src/main.js" ]; then
                STAGE=prod pm2 start dist/src/main.js --name cinematik-api
                pm2 save
                echo "Application started successfully"
                pm2 status
            else
                echo "Error: dist/src/main.js not found. Build may have failed."
                echo "Contents of dist directory:"
                find dist -type f -name "*.js" | head -10
                exit 1
            fi
